Main points to understand:
	1) In order to use callbacks, ensure your mod loads after the Framework
	2) A callback is a function and is to be stored in KDEventMapEnemy['ravagerCallbacks'][<yourCallback>]
	3) To assign a callback to a ravager, set what you used for <yourCallback> as the value for the desired callback
	4) Some callbacks are expected to return a value, possibly of a specific type

Adding a callback:
	1) Copy the AddCallback function to your ravager declaration
	2) Call that function with the following parameters: the key used to reference your callback*, and the function to be called**
	3) Set the value of the relavant callback in your ravager declaration to the key you provided to the AddCallback function***
	*) The key must be a string in order for the framework to use it. It is recommended to make your callback keys as unique as is reasonable. My recommendation is to format the key as '<ravagerName><whichCallbackThisIs>'. As an example, an 'completionCallback' for the Bandit Ravager, the key should be 'banditRavagerCompletionCallback'
	**) To declare the function in the parameter, format it as follows: `(arg1, arg2) => { your code }`. See 'Available Callbacks' below for what parameters are given to and return values are expected from each callback.
	***) Following from the example in *, set `banditRavager.ravage.completionCallback` to the value 'banditRavagerCompletionCallback'

Available Callbacks (As of V004):
	- fallbackCallback:
		- Parameters: 
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
		- Return value: None
		- When used: Any time a ravager cannot 'ravage' the player. Often during the refactory/cooldown time after finishing with the player, but also situations such as a ravager failing to find a slot on the player to use
		- Why use it: Using this callback bypasses the default grope damage/add restraint actions ravagers use as a fallback
		- Note: Using this means you're on your own for damage, actions, narration, etc. to be performed when your ravager uses the fallback action
	- completionCallback:
		- Parameters:
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
			3) passedOut (Type: boolean) - True if player has passed out as a result of the ravager
		- Return value: None
		- When: After finishing with the player
	- allRangeCallback:
		- Parameters:
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
			3) itemGroup (Type: string) - The slot the enemy is 'ravaging' through
		- Return value: None
		- When: On every ravage action taken (aka each step of using the player)
	- submitChanceModifierCallback:
		- Parameters:
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
			3) baseSubmitChance (Type: number) - The current chance for the player to submit to the ravager
		- Return value: (Type: number) The new chance for the player to submit to the ravager
		- When: Before checking whether the player is going to submit to the ravager using her
		- Why use it: It allows you to modify the chance for the player to submit to your ravager
	- Ranges callbacks:
		- Parameters:
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
			3) itemGroup (Type: string) - The slot the enemy is 'ravaging' through
		- Return value: None
		- When: When the ravager take a ravaging action, range being determined by the current progress of the ravaging
		- Note: I don't know a good way to explain setting this one for the ravager to use it, so go look at the values of `exampleEnemy.ravage.ranges` in Enemies/exampleEnemy.js
		- Note 2: As shown by it not being in the parameter list, this callback does not directly provide info about what range is triggering this call or what the current ravaging progress value is. If needed, these values are available at `enemy.Enemy.ravage.ranges` and `enemy.ravage.progress` respectively
	- effectCallback:
		- Parameters:
			1) enemy (Type: dictionary)
			2) target (Type: dictionary)
		- Return value: Boolean. True to skip all actions a ravager would normally take, false to continue normally
		- When: Every time the enemy Effect code gets called, aka every time a ravager attempts a ravaging action on the player (stripping, pinning, using, fallback, everything).
		- Why: I added this to allow the wolfgirl ravager to throw restraints at the player before closing in on her
		- Note to anyone who uses this: I kept the parameters to only enemy and target as that's all my use needed. Please let me know if your use case requires additional parameters and I can see about adding them

Further Notes:
	- In the case that any of the parameter lists change:
		- I will attempt to retain backwards compatibility.
		- I do not plan to remove a parameter from a list.
		- If it happens that a specific value is no longer available at the time of calling a callback which used to have that value available, I will attempt to provide a empty/default value of the same type of the previous value in hopes it keeps already existing callbacks from breaking (I do not plan to let this happen though).
		- If more items are added to a parameter list, thankfully js gracefully handles a function being given more parameters than it was declared with, so this shouldn't be a problem.